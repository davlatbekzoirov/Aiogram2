import logging, random, string
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from notify_admins import on_shutdown_notify, on_startup_notify
from set_bot_commands import set_default_commands
from db import Database

REFERRAL_BASE_URL = 'https://t.me/davlatbekvkmbot?start=' 
API_TOKEN = '2079588730:AAG1qy76ynpN0YI8CgEnYEs7UrJRQSUwY5E'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())
db = Database('main.db')
try:
    db.create_table_users()
    db.create_table_messages()
except:pass

user_data = {}
referral_data = {}
messages_data = {}

# def generate_referral_code(length=6):
#     """Generate a random referral code."""
#     return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

# @dp.message_handler(commands=['start'])
# async def send_welcome(message: types.Message):
#     args = message.get_args()
#     user_id = message.from_user.id

#     if args:
#         referral_code = args.strip()
#         db.add_user(user_id, referral_code=referral_code)
# #             user_bio = message.from_user.bio if message.from_user.bio else "–ù–µ—Ç –±–∏–æ–≥—Ä–∞—Ñ–∏–∏"
# #             new_user_message = f"""üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!
# # üÜî –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}
# # üìõ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name}
# # üåê –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username if message.from_user.username else "–ù–µ—Ç"}
# # üìç –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_bio}
# # ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
# # üñê–ò—Ç–æ–≥–æ: {db.count_users()[0]}"""

# #             await bot.send_message('-1002224095877', new_user_message, parse_mode='HTML')
#         if referral_code in referral_data:
#             referrer_id = referral_data[referral_code]
#             welcome_message = (
#                 "üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n"
#                 "–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ.\n\n"
#                 "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ —Å—Ç–∏–∫–µ—Ä—ã.\n\n"
#                 "‚ö†Ô∏è –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ!"
#                 f"<a href={referrer_id}> </a>"
#             )
#             await message.reply(welcome_message, parse_mode='html')
#             messages_data[user_id] = {'referred_by': referrer_id, 'messages': []}
#         else:
#             await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
#     else:
#         referral_code = generate_referral_code()
#         referral_data[referral_code] = user_id
#         referral_link = f"{REFERRAL_BASE_URL}{referral_code}"
#         user_data[user_id] = {'referral_code': referral_code, 'referral_link': referral_link}
#         intro_message = (
#             "üöÄ –ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
#             "<i>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\n"
#             f"üëâ{referral_link}\n\n"
#             "–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/Instagram/TikTok –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨"
#         )
#         await message.reply(intro_message, parse_mode='html')

# @dp.message_handler(commands=['help'])
# async def help(message: types.Message):
#     await message.reply('start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\nhelp-–ü–æ–º–æ—â—å\nreply-–û–¢–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ id-—á–µ–ª–æ–≤–µ–∫–∞')

# @dp.message_handler(commands=['reply'])
# async def reply_to_message(message: types.Message):
#     user_id = message.from_user.id
#     args = message.get_args().split(' ', 1)

#     if len(args) < 2:
#         await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä: /reply <user_id> <–≤–∞—à_–æ—Ç–≤–µ—Ç>")
#         return

#     target_user_id, reply_text = args[0], args[1]
    
#     if not target_user_id.isdigit():
#         await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
#         return

#     target_user_id = int(target_user_id)

#     if target_user_id in messages_data and messages_data[target_user_id]['referred_by'] == user_id:
#         await bot.send_message(target_user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {reply_text}")
#         await message.reply("–¢–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üò∫")
#     else:
#         await message.reply("–í—ã –Ω–µ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è..")

# @dp.message_handler()
# async def handle_anonymous_message(message: types.Message):
#     user_id = message.from_user.id
#     # print()
#     if message.reply_to_message:
#         try:
#             identifikator = message.reply_to_message.entities[0].user.id
#             await bot.send_message(identifikator,f"<a href='tg://user?id={message.from_user.id}'> </a> –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!:\n\n{message.text}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",parse_mode='html')
#         except:
#             if user_id in messages_data:
#                 referrer_id = messages_data[user_id]['referred_by']
#                 messages_data[user_id]['messages'].append(message.text)
#                 await message.reply("–¢–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üò∫")
#                 await bot.send_message(referrer_id, f"<a href='tg://user?id={message.from_user.id}'> </a> –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!:\n\n{message.text}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",parse_mode='html')

#     elif user_id in messages_data: # elifni if qilib qo'yasiz
#         referrer_id = messages_data[user_id]['referred_by']
#         messages_data[user_id]['messages'].append(message.text)
#         await message.reply("–¢–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üò∫")
#         await bot.send_message(referrer_id, f"<a href='tg://user?id={message.from_user.id}'> </a> –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!:\n\n{message.text}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",parse_mode='html')
#     else:
#         await message.reply("–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É...")

# async def on_startup(dispatcher):
#     await set_default_commands(dispatcher)
#     await on_startup_notify(dispatcher)

# if __name__ == '__main__':
#     executor.start_polling(dp, skip_updates=True)





def generate_referral_code(length=6):
    """Generate a random referral code."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    args = message.get_args()
    user_id = message.from_user.id

    if args:
        referral_code = args.strip()
        db.add_user(user_id, referral_code)
        if referral_code in referral_data:
            referrer_id = referral_data[referral_code]
            welcome_message = (
                "üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ.\n\n"
                "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ —Å—Ç–∏–∫–µ—Ä—ã.\n\n"
                "‚ö†Ô∏è –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ!"
                f"<a href={referrer_id}> </a>"
            )
            await message.reply(welcome_message, parse_mode='html')
            messages_data[user_id] = {'referred_by': referrer_id, 'messages': []}
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    else:
        referral_code = generate_referral_code()
        referral_data[referral_code] = user_id
        referral_link = f"{REFERRAL_BASE_URL}{referral_code}"
        user_data[user_id] = {'referral_code': referral_code, 'referral_link': referral_link}
        intro_message = (
            "üöÄ –ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n"
            "<i>–¢–≤–æ—è –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞:</i>\n"
            f"üëâ{referral_link}\n\n"
            "–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ —Å–≤–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram/Instagram/TikTok –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–æ—Ü —Å–µ—Ç—è—Ö, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è üí¨"
        )
        await message.reply(intro_message, parse_mode='html')

@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    await message.reply('start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\nhelp - –ü–æ–º–æ—â—å\nreply - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ id-—á–µ–ª–æ–≤–µ–∫–∞')

@dp.message_handler(commands=['reply'])
async def reply_to_message(message: types.Message):
    user_id = message.from_user.id
    args = message.get_args().split(' ', 1)

    if len(args) < 2:
        await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç. –ü—Ä–∏–º–µ—Ä: /reply <user_id> <–≤–∞—à_–æ—Ç–≤–µ—Ç>")
        return

    target_user_id, reply_text = args[0], args[1]
    
    if not target_user_id.isdigit():
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    target_user_id = int(target_user_id)

    if target_user_id in messages_data and messages_data[target_user_id]['referred_by'] == user_id:
        try:
            user_info = await bot.get_chat_member(chat_id=target_user_id, user_id=target_user_id)
            if user_info.user.is_bot:
                await message.reply("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É.")
            else:
                await bot.send_message(target_user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: {reply_text}")
                await message.reply("–¢–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üò∫")
        except Exception as e:
            logging.error(f"Error sending message: {e}")
            await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    else:
        await message.reply("–í—ã –Ω–µ —É–ø–æ–ª–Ω–æ–º–æ—á–µ–Ω—ã –æ—Ç–≤–µ—á–∞—Ç—å —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@dp.message_handler()
async def handle_anonymous_message(message: types.Message):
    user_id = message.from_user.id

    if message.reply_to_message:
        try:
            identifikator = message.reply_to_message.from_user.id
            user_info = await bot.get_chat_member(chat_id=identifikator, user_id=identifikator)
            await bot.send_message(identifikator, f"<a href='tg://user?id={user_id}'> </a> –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!:\n\n{message.text}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.", parse_mode='html')
        except Exception as e:
            logging.error(f"Error sending message: {e}")
            if user_id in messages_data:
                referrer_id = messages_data[user_id]['referred_by']
                messages_data[user_id]['messages'].append(message.text)
                db.add_user_message(user_id, referrer_id, message.text)
                await message.reply("–¢–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üò∫")
                await bot.send_message(referrer_id, f"<a href='tg://user?id={user_id}'> </a> –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!:\n\n{message.text}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.", parse_mode='html')

    elif user_id in messages_data:
        referrer_id = messages_data[user_id]['referred_by']
        messages_data[user_id]['messages'].append(message.text)
        db.add_user_message(user_id, referrer_id, message.text)
        await message.reply("–¢–≤–æ–π –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üò∫")
        await bot.send_message(referrer_id, f"<a href='tg://user?id={user_id}'> </a> –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!:\n\n{message.text}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.", parse_mode='html')
    else:
        await message.reply("–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É...")

async def on_startup(dispatcher):
    await set_default_commands(dispatcher)
    await on_startup_notify(dispatcher)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)